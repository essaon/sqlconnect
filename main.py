from aiogram import Bot, Dispatcher, executor, types
import markups as mk
import config
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime, timedelta
import asyncio
import re
from database.models import User, Task #–ó–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ 

#–≠—Ç–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—É—é –º–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–æ–≤ SQL
#from database.database import SQLITE as sqlite
#sql = sqlite()
        

    

bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
tasks = {} # sql
reg_users = {} # sql

admin_ids = config.admin_ids # sql —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å id –∞–¥–º–∏–Ω–æ–≤
super_admin_ids = config.super_admin_ids # sql —ç—Ç–æ —Ç–æ–∂–µ —Å–ª–æ–≤–∞—Ä—å —Å id –∞–¥–º–∏–Ω–æ–≤, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫—Ä—É—á–µ
# —è –∏—Ö –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–∏–Ω—É–ª –≤ –∫–æ–Ω—Ñ–∏–≥, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –≥–∏—Ç–µ –Ω–µ—Ç—É

users = {}
admins_tasks = {}

task_id_counter = 0
users_waiting_for_confirmation = {}

commands = {"/start", "/help", "/cancel"}


def is_deadline_valid(deadline):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "DD.MM.YYYY HH:MM"
    pattern = r'^(0[1-9]|[1-2][0-9]|3[0-1])\.(0[1-9]|1[0-2])\.(20[2-9]\d) (0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$'

    if re.match(pattern, deadline):
        return True
    else:
        return False


def format_task_info(task):
    assigned_to_list = task.assigned_to.split(',')
    assigned_to_text = ', '.join([f'@{username.strip()}' for username in assigned_to_list])

    message_text = (
        f"<b>ID:</b> {task.id}\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n\n"
        f"<b>–¢–∏–ø:</b> {task.type}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}\n\n"
        f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {task.deadline}\n\n"
        f"<b>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –ª—é–¥–∏:</b> {assigned_to_text}\n\n"
        f"<b>–ö—Ç–æ —Å–æ–∑–¥–∞–ª:</b> @{task.who_created}\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {task.status}\n\n"
    )
    return message_text


async def send_notification(assigned_to, task_id, text):
    for user_username in assigned_to:
        for user_id, username in reg_users.items():
            if username == user_username:
                print(user_username)
                message_text = text + '\n\n' + format_task_info(sql.get_task(task_id))
                done_button = mk.make_done_button(task_id)
                await bot.send_message(user_id, message_text, reply_markup=done_button, parse_mode='HTML')


@dp.message_handler(text='—Ö—É–π')
async def command_start(message: types.Message):
    for data in sql.get_user_id_name():
        print(*data)


async def cancel_add(message: types.Message):
    global task_id_counter
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=mk.adminMenu)
    del tasks[task_id_counter]
    task_id_counter -= 1
    await dp.current_state(user=message.from_user.id).set_state(None)
    return


async def send_reminder():
    while True:
        now = datetime.now()

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º
        if not any(task.get('deadline') for task in tasks.values()):
            print("–í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏ deadline.")
        else:
            for task_id, task in tasks.items():
                if 'assigned_to' in task and 'deadline' in task and task['deadline']:
                    deadline = datetime.strptime(task['deadline'], "%d.%m.%Y %H:%M")
                    time_difference = deadline - now
                    if time_difference > timedelta(weeks=1):
                        weeks_to_deadline = time_difference // timedelta(weeks=1)
                        if timedelta(weeks=weeks_to_deadline) <= time_difference <= timedelta(weeks=weeks_to_deadline,
                                                                                              minutes=1):
                            await send_notification(task['assigned_to'].split(','), task_id,
                                                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –†–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞: {weeks_to_deadline}, –∑–∞ —Ä–∞–±–æ—Ç—É!")
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ (timedelta)
                    elif timedelta(days=7) <= time_difference <= timedelta(days=7, minutes=1):
                        await send_notification(task['assigned_to'].split(','), task_id,
                                                "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ! –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!")
                    elif timedelta(days=3) <= time_difference <= timedelta(days=3, minutes=1):
                        await send_notification(task['assigned_to'].split(','), task_id,
                                                "–ü–æ—Ä–∞ –¥–≤–∏–≥–∞—Ç—å –ø–æ–ø–æ–π! –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 3 –¥–Ω—è!")
                    elif timedelta(days=1) <= time_difference <= timedelta(days=1, minutes=1):
                        await send_notification(task['assigned_to'].split(','), task_id,
                                                "–î—Ä—É–≥, –ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å! –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å!")
                    elif timedelta(hours=1) <= time_difference <= timedelta(hours=1, minutes=1):
                        await send_notification(task['assigned_to'].split(','), task_id,
                                                "–í—Ä–µ–º—è —Å–æ–≤—Å–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–µ! –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 1 —á–∞—Å!")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 59 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(59)


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    user_id = message.from_user.id
    if user_id in admin_ids:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–∫—Ç–∏–≤üëã\n–Ø —Ç–∞—Å–∫–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–ª—É—á–∞—Ç—å, –¥–∞–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∫ \
–¥–µ–¥–ª–∞–π–Ω—Éüßë‚Äçüíª\n\n–¢–∞—Å–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ '<b>–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è</b>'\n–¢–∞—Å–æ—á–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞ \
—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ '<b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è</b>'\n–¢–∞—Å–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–∏–ª —Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã –≤ '<b>–Ø –Ω–∞–∑–Ω–∞—á–∏–ª</b>' (<i>—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤ \
–æ—Ç–¥–µ–ª–∞</i>üëë)\n\n–ö—Å—Ç–∞—Ç–∏, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ <b>–∞–¥–º–∏–Ω</b>üòâ\n\n–£–¥–∞—á–∏üçÄ", reply_markup=mk.adminMenu, parse_mode='HTML')
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–∫—Ç–∏–≤üëã\n–Ø —Ç–∞—Å–∫–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–ª—É—á–∞—Ç—å, –¥–∞–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∫ \
–¥–µ–¥–ª–∞–π–Ω—Éüßë‚Äçüíª\n\n–¢–∞—Å–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ '<b>–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è</b>'\n–¢–∞—Å–æ—á–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞ \
—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ '<b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è</b>'\n\n–ö—Å—Ç–∞—Ç–∏, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ <b>–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>üòâ\n\n–£–¥–∞—á–∏üçÄ",
                             reply_markup=mk.userMenu, parse_mode='HTML')

    reg_users[user_id] = message.from_user.username
    print(message.from_user.id, message.from_user.username)


@dp.message_handler(commands=['help'])
async def command_help(message: types.Message):
    await message.answer("Help box‚ú®\n\n\
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\n\
/cancel - –æ—Ç–º–µ–Ω—è–µ—Ç\n\
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n\
<b>–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è\n\n\
<b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞\n\n\
<i>–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞</i>\n\n\
<b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b> - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)\n\n\
<b>–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b> - –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –Ω–∞–∑–Ω–∞—á–∏–ª –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n\
<b>–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –Ω–∞–∑–Ω–∞—á–∏–ª –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n\
<b>–Ø –Ω–∞–∑–Ω–∞—á–∏–ª</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –Ω–∞–∑–Ω–∞—á–∏–ª –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n\
/add_admin @username - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (–Ω–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å —Ö–∏-—Ö–∏-—Ö–∏-—Ö–∞)\n\n\
/delete_admin @username - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—ç—Ç–æ —Ç–æ–∂–µ –Ω–µ –º–æ–∂–µ—à—å —Ö–∏-—Ö–∏-—Ö–∏-—Ö–∞)\n\n\
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @payalnik144", reply_markup=mk.adminMenu, parse_mode='HTML')


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ')
async def add_task(message: types.Message):
    user_id = message.from_user.id
    if user_id in admin_ids:
        global task_id_counter
        task_id_counter += 1
        admins_tasks[user_id] = task_id_counter
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        tasks[admins_tasks[user_id]] = {'task_id': '', 'title': '', 'type': '', 'description': '', 'deadline': '',
                                        'assigned_to': '',
                                        'who_created': (message.from_user.username or 'UnknownUser'),
                                        'status': '–ù–µ —Å–¥–µ–ª–∞–Ω–æ‚ùå',
                                        }
        tasks[admins_tasks[user_id]]['task_id'] = admins_tasks[user_id]
        await dp.current_state(user=message.from_user.id).set_state("waiting_for_title")
    else:
        await message.answer("–ù–µ –ª–µ–µ–µ–∑—å, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ü§ì")


@dp.message_handler(state="waiting_for_title")
async def process_new_task_description(message: types.Message):
    user_id = message.from_user.id
    if message.text == '/cancel':
        await cancel_add(message)
    if admins_tasks[user_id] in tasks:
        tasks[admins_tasks[user_id]]['title'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:")
        await dp.current_state(user=message.from_user.id).set_state("waiting_for_type")


@dp.message_handler(state="waiting_for_type")
async def process_new_task_description(message: types.Message):
    user_id = message.from_user.id
    if message.text == '/cancel':
        await cancel_add(message)
    if admins_tasks[user_id] in tasks:
        tasks[admins_tasks[user_id]]['type'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        await dp.current_state(user=message.from_user.id).set_state("waiting_for_description")


@dp.message_handler(state="waiting_for_description")
async def process_new_task_description(message: types.Message):
    user_id = message.from_user.id
    if message.text == '/cancel':
        await cancel_add(message)
    if admins_tasks[user_id] in tasks:
        tasks[admins_tasks[user_id]]['description'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM):\n<i>–Ω–∞–ø—Ä–∏–º–µ—Ä</i>, 15.01.2023 14:00",
                             parse_mode='HTML')
        await dp.current_state(user=message.from_user.id).set_state("waiting_for_deadline")


@dp.message_handler(state="waiting_for_deadline")
async def process_new_task_deadline(message: types.Message):
    user_id = message.from_user.id
    if message.text == '/cancel':
        await cancel_add(message)
    if admins_tasks[user_id] in tasks:
        deadline = message.text
        if is_deadline_valid(deadline):
            tasks[admins_tasks[user_id]]['deadline'] = deadline
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—ç–≥–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n<i>–Ω–∞–ø—Ä–∏–º–µ—Ä</i>, @payalnik143, \
@payalnik144, @payalnik145", parse_mode='HTML')
            await dp.current_state(user=message.from_user.id).set_state("waiting_for_assigned_to")
        else:
            await message.answer("–î–µ–¥–ª–∞–π–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. \
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message_handler(state="waiting_for_assigned_to")
async def process_new_task_assigned_to(message: types.Message):
    if message.text == '/cancel':
        await cancel_add(message)
    user_id = message.from_user.id
    if admins_tasks[user_id] in tasks:
        tasks[admins_tasks[user_id]]['assigned_to'] = message.text.replace('@', '').replace(' ', '')

        await message.answer(f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {admins_tasks[user_id]}")
        task = tasks[admins_tasks[user_id]]
        message_text = format_task_info(task)
        await message.answer(message_text, reply_markup=mk.adminMenu, parse_mode='HTML')

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º –ª—é–¥—è–º
        assigned_to = tasks[admins_tasks[user_id]]['assigned_to'].split(',')
        await send_notification(assigned_to, admins_tasks[user_id], "–¢–µ–±–µ –ø—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è —Ç–∞—Å–æ—á–∫–∞, –ø—É–ø—Å–∏–∫:")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "waiting_for_assigned_to"
        await dp.current_state(user=user_id).set_state(None)


@dp.message_handler(text='–í—Å–µ –∑–∞–¥–∞–Ω–∏—è')
async def watch_task(message: types.Message):
    if not tasks:
        await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
    else:
        for task_id in tasks.keys():
            task = tasks[task_id]
            message_text = format_task_info(task)
            await message.answer(message_text, parse_mode='HTML')


@dp.message_handler(text='–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è')
async def show_my_tasks(message: types.Message):
    user_username = message.from_user.username

    user_assigned_tasks = [task for task in tasks.values() if user_username in task['assigned_to'].split(',')]
    if user_assigned_tasks:
        for task in user_assigned_tasks:
            message_text = format_task_info(task)
            if task['status'] == '–ù–µ —Å–¥–µ–ª–∞–Ω–æ‚ùå':
                done_button = mk.make_done_button(task['task_id'])
                await message.answer(message_text, reply_markup=done_button, parse_mode='HTML')
            else:
                undone_button = mk.make_undone_button(task['task_id'])
                await message.answer(message_text, reply_markup=undone_button, parse_mode='HTML')
    else:
        await message.answer("–í–∞–º –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∑–∞–¥–∞—á–∏.")


@dp.message_handler(text='–Ø –Ω–∞–∑–Ω–∞—á–∏–ª')
async def show_tasks_given_you(message: types.Message):
    user_id = message.from_user.id
    if user_id in admin_ids:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–æ–∑–¥–∞–ª
        admin_tasks = [task for task in tasks.values() if task['who_created'] == message.from_user.username]
        if admin_tasks:
            for task in admin_tasks:
                message_text = format_task_info(task)
                await message.answer(message_text, parse_mode='HTML')
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.")


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ')
async def request_task_id(message: types.Message):
    user_id = message.from_user.id
    if user_id in admin_ids:
        if not tasks:
            await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ ID –∑–∞–¥–∞—á–∏
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏
            await dp.current_state(user=message.from_user.id).set_state("waiting_for_task_id")
    else:
        await message.answer("–ù–µ –ª–µ–µ–µ–∑—å, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ü§ì")


@dp.message_handler(state="waiting_for_task_id")
async def confirm_delete_task(message: types.Message):
    if message.text in commands:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=mk.adminMenu)
        await dp.current_state(user=message.from_user.id).set_state(None)
        return
    if not message.text.isdigit():
        await message.answer("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    task_id = int(message.text)
    if task_id in tasks:
        task = tasks[task_id]
        if task['who_created'] != message.from_user.username and message.from_user.id not in super_admin_ids:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–ª –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω.")
            await dp.current_state(user=message.from_user.id).set_state(None)
        else:
            message_text = format_task_info(task)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add("–î–∞", "–ù–µ—Ç")
            await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É?\n{message_text}", reply_markup=markup, parse_mode='HTML')

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è" –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ
            users_waiting_for_confirmation[message.from_user.id] = task_id
            await dp.current_state(user=message.from_user.id).set_state("waiting_for_confirmation")
    else:
        await message.answer(f"–ó–∞–¥–∞—á–∏ —Å ID {task_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        users_waiting_for_confirmation[message.from_user.id] = None
        await dp.current_state(user=message.from_user.id).set_state(None)


@dp.message_handler(state="waiting_for_confirmation")
async def process_delete_confirmation(message: types.Message):
    user_id = message.from_user.id
    task_id = users_waiting_for_confirmation.get(user_id)
    if message.text in commands:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=mk.adminMenu)
        await dp.current_state(user=message.from_user.id).set_state(None)
        return
    if task_id is not None:
        if message.text == "–î–∞":
            del tasks[task_id]
            await message.answer(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=mk.adminMenu)
        elif message.text == "–ù–µ—Ç":
            await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=mk.adminMenu)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ
        users_waiting_for_confirmation[user_id] = None
    await dp.current_state(user=message.from_user.id).set_state(None)


@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ')
async def request_task_id(message: types.Message):
    user_id = message.from_user.id
    if user_id in admin_ids:
        if not tasks:
            await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ ID –∑–∞–¥–∞—á–∏
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏
            await dp.current_state(user=message.from_user.id).set_state("waiting_for_task_id_2")
    else:
        await message.answer("–ù–µ –ª–µ–µ–µ–∑—å, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ü§ì")


@dp.message_handler(state="waiting_for_task_id_2")
async def edit_task(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    if message.text in commands:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=mk.adminMenu)
        await dp.current_state(user=message.from_user.id).set_state(None)
        return
    if not message.text.isdigit():
        await message.answer("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    task_id = int(message.text)

    if task_id not in tasks:
        await message.answer(f"–ó–∞–¥–∞—á–∏ —Å ID {task_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await dp.current_state(user=message.from_user.id).set_state(None)
        return
    else:
        task = tasks[task_id]
        if task['who_created'] != message.from_user.username and message.from_user.id not in super_admin_ids:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–ª –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω.")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=mk.editMenu)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            users[message.from_user.id] = {'task_id': task_id}
            users[message.from_user.id]['editing'] = True
    await dp.current_state(user=message.from_user.id).set_state("waiting_for_field_to_edit")


@dp.message_handler(state="waiting_for_field_to_edit")
async def edit_task_field(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users or 'editing' not in users[user_id]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await dp.current_state(user=message.from_user.id).set_state(None)
        return

    if message.text in commands:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=mk.adminMenu)
        if users[user_id]['editing']:
            del users[user_id]['editing']
        await dp.current_state(user=message.from_user.id).set_state(None)
        return

    if message.text not in ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–û–ø–∏—Å–∞–Ω–∏–µ', '–î–µ–¥–ª–∞–π–Ω', '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –ª—é–¥–∏']:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    field_to_edit = message.text
    users[user_id]['field_to_edit'] = field_to_edit
    if field_to_edit == '–î–µ–¥–ª–∞–π–Ω':
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{field_to_edit}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM:\n<i>–Ω–∞–ø—Ä–∏–º–µ—Ä</i>, \
15.01.2023 14:00", parse_mode='HTML')
    elif field_to_edit == '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –ª—é–¥–∏':
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{field_to_edit}' —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n<i>–Ω–∞–ø—Ä–∏–º–µ—Ä</i>, \
@payalnik143, @payalnik144, @payalnik145", parse_mode='HTML')
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{field_to_edit}':")
    users[user_id]['editing_value'] = True
    await dp.current_state(user=message.from_user.id).set_state("waiting_for_editing_value")


@dp.message_handler(state="waiting_for_editing_value")
async def edit_task_field_value(message: types.Message):
    user_id = message.from_user.id
    if 'editing_value' not in users[user_id]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        if users[user_id]['editing']:
            del users[user_id]['editing']
        if users[user_id]['field_to_edit']:
            del users[user_id]['field_to_edit']
        await dp.current_state(user=message.from_user.id).set_state(None)
        return

    field_to_edit = users[user_id]['field_to_edit']
    task_id = users[user_id]['task_id']

    if message.text in commands:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=mk.adminMenu)
        if users[user_id]['editing_value']:
            del users[user_id]['editing_value']
        if users[user_id]['field_to_edit']:
            del users[user_id]['field_to_edit']
        if users[user_id]['editing']:
            del users[user_id]['editing']
        await dp.current_state(user=message.from_user.id).set_state(None)
        return

    new_value = message.text

    if task_id not in tasks:
        await message.answer("–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await dp.current_state(user=message.from_user.id).set_state(None)
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    task = tasks[task_id]

    if field_to_edit == "–ù–∞–∑–≤–∞–Ω–∏–µ":
        task['title'] = new_value
    elif field_to_edit == "–¢–∏–ø":
        task['type'] = new_value
    elif field_to_edit == "–û–ø–∏—Å–∞–Ω–∏–µ":
        task['description'] = new_value
    elif field_to_edit == "–î–µ–¥–ª–∞–π–Ω":
        if is_deadline_valid(new_value):
            task['deadline'] = new_value
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 'DD.MM.YYYY HH:MM'.")
            return
    elif field_to_edit == "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –ª—é–¥–∏":
        task['assigned_to'] = new_value.replace('@', '').replace(' ', '')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    message_text = format_task_info(task)

    await message.answer(f"–ü–æ–ª–µ '{field_to_edit}' –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}")
    await message.answer(message_text, reply_markup=mk.adminMenu, parse_mode='HTML')
    await send_notification(task['assigned_to'].split(','), task_id, f"–ê–¥–º–∏–Ω @{message.from_user.username} \
–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –≤–∞—à—É –∑–∞–¥–∞—á—É (ID: {task_id})\n–î–µ—Ä–∂—É –≤ –∫—É—Ä—Å–µ, –±—Ä–æü§ô")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if users[user_id]['editing']:
        del users[user_id]['editing']
    if users[user_id]['field_to_edit']:
        del users[user_id]['field_to_edit']
    if users[user_id]['editing_value']:
        del users[user_id]['editing_value']
    await dp.current_state(user=user_id).set_state(None)


@dp.callback_query_handler(lambda callback: callback.data.startswith("mark_done_"))
async def handle_mark_done(callback: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query.data
    task_id = int(callback.data.split("_")[2])

    if task_id in tasks:
        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        tasks[task_id]['status'] = "–°–¥–µ–ª–∞–Ω–æ‚úÖ"
        text_message = format_task_info(tasks[task_id])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞—á–∏
        task_creator = tasks[task_id]['who_created']
        creator_id = next((user_id for user_id, user_username in reg_users.items() if user_username == task_creator), None)
        if creator_id is not None:
            if 'notification_message_id' in tasks[task_id]:
                await bot.delete_message(chat_id=creator_id, message_id=tasks[task_id].get('notification_message_id'))

            text_message2 = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} \
–æ—Ç–º–µ—Ç–∏–ª –≤–∞—à—É –∑–∞–¥–∞—á—É (ID: {task_id}) –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.\n\n"+text_message

            message = await bot.send_message(creator_id, text_message2, parse_mode="HTML")
            tasks[task_id]['notification_message_id'] = message.message_id
            print(f"ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task_creator}: {creator_id}")
        else:
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {task_creator} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=text_message,
                                    reply_markup=mk.make_undone_button(task_id), parse_mode="HTML")

    await callback.answer()


@dp.callback_query_handler(lambda callback: callback.data.startswith("mark_undone_"))
async def handle_mark_undone(callback: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query.data
    task_id = int(callback.data.split("_")[2])

    if task_id in tasks:
        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        tasks[task_id]['status'] = "–ù–µ —Å–¥–µ–ª–∞–Ω–æ‚ùå"
        text_message = format_task_info(tasks[task_id])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞—á–∏
        task_creator = tasks[task_id]['who_created']
        creator_id = next((user_id for user_id, user_username in reg_users.items() if user_username == task_creator), None)
        if creator_id is not None:
            if 'notification_message_id' in tasks[task_id]:
                await bot.delete_message(chat_id=creator_id, message_id=tasks[task_id].get('notification_message_id'))

            text_message2 = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} \
–æ—Ç–º–µ—Ç–∏–ª –≤–∞—à—É –∑–∞–¥–∞—á—É (ID: {task_id}) –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.\n\n" + text_message

            message = await bot.send_message(creator_id, text_message2, parse_mode="HTML")
            tasks[task_id]['notification_message_id'] = message.message_id

            print(f"ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task_creator}: {creator_id}")
        else:
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {task_creator} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=text_message,
                                    reply_markup=mk.make_done_button(task_id), parse_mode="HTML")
    await callback.answer()


@dp.message_handler(lambda message: message.text.startswith("/add_admin"))
async def handle_add_admin(message: types.Message):
    us_id = message.from_user.id
    if us_id not in super_admin_ids:
        await message.answer("–ï—â—ë –Ω–µ –¥–æ—Ä–æ—Å, –ø—É–ø—Å–∏–∫")
        return
    if len(message.text.split()) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        return
    new_admin_username = message.text.split()[1].replace("@", "")
    user_id = next((user_id for user_id, user_username in reg_users.items() if user_username == new_admin_username),
                   None)
    if user_id in super_admin_ids:
        await message.answer(f"–î–∞ —ç—Ç–æ –∂–µ –Ω–∞—à –±—Ä–∞—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} —É–∂–µ –∞–¥–º–∏–Ω")
        return
    if user_id in reg_users:
        admin_ids.add(user_id)
        await bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º —Ç–∞—Å–∫–∞–±–æ—Ç–∞!ü•≥", reply_markup=mk.adminMenu)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!ü•≥")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")


@dp.message_handler(lambda message: message.text.startswith("/delete_admin"))
async def handle_delete_admin(message: types.Message):
    us_id = message.from_user.id
    if us_id not in super_admin_ids:
        await message.answer("–ï—â—ë –Ω–µ –¥–æ—Ä–æ—Å, –ø—É–ø—Å–∏–∫")
        return
    if len(message.text.split()) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        return
    new_admin_username = message.text.split()[1].replace("@", "")
    user_id = next((user_id for user_id, user_username in reg_users.items() if user_username == new_admin_username),
                   None)
    if user_id in super_admin_ids:
        await message.answer(f"–û–Ω –∏ —Ç–∞–∫ –Ω–µ —Å –Ω–∞–º–∏! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ \
—è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        return
    if user_id in reg_users:
        admin_ids.remove(user_id)
        await bot.send_message(user_id, f"–¢—ã –≤—ã–ø–∏—Å–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∏–¥–æ—Ä–∞—Å–æ–≤ (–±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω)üò≠", reply_markup=mk.userMenu)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω!üò≠")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")


@dp.message_handler()
async def all_(message: types.Message):
    if message.text.lower() == "–∂–æ—Å":
        await message.answer("–∫–∏–π –î–æ–±—Ä—ã–Ω—è –ù–∏–∫–∏—Ç–∏—á")
async def on_startup(dp):
    asyncio.create_task(send_reminder())


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)